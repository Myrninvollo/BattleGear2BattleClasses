@@ -14,6 +14,10 @@
 import java.util.UUID;
 import java.util.Map.Entry;
 
+import mods.battlegear2.api.core.BattlegearUtils;
+import mods.battlegear2.api.core.IBattlePlayer;
+import mods.battlegear2.api.core.InventoryPlayerBattle;
+import mods.battlegear2.api.shield.IShield;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockBed;
 import net.minecraft.block.material.Material;
@@ -93,8 +97,20 @@
 import net.minecraftforge.event.entity.player.PlayerFlyableFallEvent;
 import net.minecraftforge.event.entity.player.PlayerSleepInBedEvent;
 
-public abstract class EntityPlayer extends EntityLivingBase implements ICommandSender
+public abstract class EntityPlayer extends EntityLivingBase implements ICommandSender, IBattlePlayer
 {
+    /*
+	 * Mine & Blade: Notes Edits made by: nerd-boy
+	 *
+	 * Edits: 4 Added Methods: 6 Added Fields: 5
+	 *
+	 * Adding methods and fields is relatively easy. Some of the methods
+	 * provided are not needed, they do however provide more simple access.
+	 *
+	 * The only other edit is to replace the instance of Inventory player with
+	 * the custom Inventory class. It has also been marked as final to prevent
+	 * other mods changing this later.
+	 */
     public static final String PERSISTED_NBT_TAG = "PlayerPersisted";
     private HashMap<Integer, ChunkCoordinates> spawnChunkMap = new HashMap<Integer, ChunkCoordinates>();
     private HashMap<Integer, Boolean> spawnForcedMap = new HashMap<Integer, Boolean>();
@@ -102,7 +118,7 @@
     /**
      * Inventory of the player
      */
-    public InventoryPlayer inventory = new InventoryPlayer(this);
+    public InventoryPlayer inventory = new InventoryPlayerBattle(this);
     private InventoryEnderChest theInventoryEnderChest = new InventoryEnderChest();
     /**
      * The Container for the player's inventory (which opens when they press E)
@@ -220,6 +236,7 @@
         this.dataWatcher.addObject(16, Byte.valueOf((byte)0));
         this.dataWatcher.addObject(17, Float.valueOf(0.0F));
         this.dataWatcher.addObject(18, Integer.valueOf(0));
+        this.dataWatcher.addObject(25, (byte)0);//-----MB-Edited-----
     }
 
     /**
@@ -506,11 +523,11 @@
 
             if (itemstack != this.itemInUse || itemstack != null && itemstack.stackSize != i)
             {
-                this.inventory.mainInventory[this.inventory.currentItem] = itemstack;
+                BattlegearUtils.setPlayerCurrentItem(this, itemstack);//-----MB-Edited-----
 
                 if (itemstack != null && itemstack.stackSize == 0)
                 {
-                    this.inventory.mainInventory[this.inventory.currentItem] = null;
+                    BattlegearUtils.setPlayerCurrentItem(this, null);//-----MB-Edited-----
                 }
             }
 
@@ -2384,7 +2401,7 @@
     {
         if (par1 == 0)
         {
-            this.inventory.mainInventory[this.inventory.currentItem] = par2ItemStack;
+            BattlegearUtils.setPlayerCurrentItem(this, par2ItemStack);//-----MB-Edited-----
         }
         else
         {
@@ -2644,6 +2661,98 @@
                 EntityPlayer.EnumChatVisibility var3 = var0[var2];
                 field_151432_d[var3.chatVisibility] = var3;
             }
+        }
+    }
+
+
+    /* ===================================== Battlegear2 START =====================================*/
+
+    // -----MB-addFields-----
+    public float offHandSwingProgress = 0.0F;
+    public float prevOffHandSwingProgress = 0.0F;
+    public int offHandSwingProgressInt = 0;
+    public boolean isOffHandSwingInProgress = false;
+    public int specialActionTimer = 0;
+
+    // -----MB-AddMethod-----
+    public void attackTargetEntityWithCurrentOffItem(Entity target) {
+        BattlegearUtils.attackTargetEntityWithCurrentOffItem(this, target);
+    }
+
+    // -----MB-AddMethod-----
+    public void swingOffItem() {
+        if (!this.isOffHandSwingInProgress || this.offHandSwingProgressInt >= this
+                .getArmSwingAnimationEndCopy() / 2
+                || this.offHandSwingProgressInt < 0) {
+            this.offHandSwingProgressInt = -1;
+            this.isOffHandSwingInProgress = true;
+        }
+    }
+
+    // -----MB-AddMethod-----
+    public float getOffSwingProgress(float frame) {
+        float diff = this.offHandSwingProgress - this.prevOffHandSwingProgress;
+        if (diff < 0.0F) {
+            ++diff;
+        }
+        return this.prevOffHandSwingProgress + diff * frame;
+    }
+
+    // -----MB-AddMethod-----
+    private int getArmSwingAnimationEndCopy() {
+        return this.isPotionActive(Potion.digSpeed) ? 6 - (1 + this
+                .getActivePotionEffect(Potion.digSpeed).getAmplifier())
+                : (this.isPotionActive(Potion.digSlowdown) ? 6 + (1 + this
+                .getActivePotionEffect(Potion.digSlowdown)
+                .getAmplifier()) * 2 : 6);
+    }
+
+    // -----MB-AddMethod----- (Overridden)
+    @Override
+    protected void updateArmSwingProgress() {
+        super.updateArmSwingProgress();
+        this.prevOffHandSwingProgress = this.offHandSwingProgress;
+        int var1 = this.getArmSwingAnimationEndCopy();
+        if (this.isOffHandSwingInProgress) {
+            ++this.offHandSwingProgressInt;
+            if (this.offHandSwingProgressInt >= var1) {
+                this.offHandSwingProgressInt = 0;
+                this.isOffHandSwingInProgress = false;
+            }
+        } else {
+            this.offHandSwingProgressInt = 0;
+        }
+        this.offHandSwingProgress = (float) this.offHandSwingProgressInt / (float) var1;
+        if(specialActionTimer > 0){
+            this.isOffHandSwingInProgress = false;
+            this.isSwingInProgress = false;
+            this.offHandSwingProgress = 0;
+            this.offHandSwingProgressInt = 0;
+            this.swingProgress = 0;
+            this.swingProgressInt = 0;
+        }
+    }
+
+    // -----MB-AddMethod-----
+    public boolean isBattlemode() {
+        return ((InventoryPlayerBattle) inventory).isBattlemode();
+    }
+
+    //-----MB-AddMethod-----
+    public boolean isBlockingWithShield(){
+        if(((InventoryPlayerBattle)inventory).getCurrentOffhandWeapon() != null &&
+                ((InventoryPlayerBattle)inventory).getCurrentOffhandWeapon().getItem() instanceof IShield){
+            return dataWatcher.getWatchableObjectByte(25) > 0;
+        }else
+            return false;
+    }
+    //-----MB-AddMethod-----
+    public void setBlockingWithShield(boolean block){
+        if(block && ((InventoryPlayerBattle)inventory).getCurrentOffhandWeapon() != null &&
+                ((InventoryPlayerBattle)inventory).getCurrentOffhandWeapon().getItem() instanceof IShield){
+            dataWatcher.updateObject(25, (byte)1);
+        }else{
+            dataWatcher.updateObject(25, (byte)0);
         }
     }

